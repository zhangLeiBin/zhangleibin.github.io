{"meta":{"title":"zxzybin","subtitle":"个人随笔","description":"记录生活","author":"zxzy","url":"https://zxzybin.github.io"},"pages":[{"title":"关于自己","date":"2016-05-11T12:02:02.000Z","updated":"2019-07-07T02:50:54.997Z","comments":true,"path":"about/index.html","permalink":"https://zxzybin.github.io/about/index.html","excerpt":"","text":"万物皆有裂痕，那是光照进来的地方自接触前端至现在以来，做过点大大小小的项目，经历过些些许许的团队，也曾赶在项目上线通宵达旦，也曾纠结某个bug夜不能寐，然而一路走来的点点滴滴都历历在目。古人云: 看山是山，看山不是山，看山还是山的三种境界,相比也是每个程序人孜孜不倦的人生追求。 如今，在这个躁动不安的世界里，保持一颗初心是如此的难能可贵，你不想岁月遗忘了你，但岁月从来都不是只眷顾你一人，愿每一个独行在奋斗之路的人，终究都能收获自己想要的人生！ 不忘初心 奋斗不息"},{"title":"分类大集合","date":"2016-05-11T13:31:36.000Z","updated":"2019-11-13T02:44:12.641Z","comments":true,"path":"categories/index.html","permalink":"https://zxzybin.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"vue生命周期学习图解","slug":"vue生命周期学习图解","date":"2018-08-13T12:12:08.000Z","updated":"2019-11-13T02:51:04.743Z","comments":true,"path":"2018/08/13/vue生命周期学习图解/","link":"","permalink":"https://zxzybin.github.io/2018/08/13/vue生命周期学习图解/","excerpt":"vue生命周期学习图解，欢迎看到的小伙伴交流参考","text":"vue生命周期学习图解，欢迎看到的小伙伴交流参考","categories":[{"name":"技术","slug":"技术","permalink":"https://zxzybin.github.io/categories/技术/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://zxzybin.github.io/tags/vue/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://zxzybin.github.io/categories/技术/"}]},{"title":"前端技术栈线路图","slug":"fullstack","date":"2018-07-15T12:18:18.000Z","updated":"2019-10-21T04:04:59.188Z","comments":false,"path":"2018/07/15/fullstack/","link":"","permalink":"https://zxzybin.github.io/2018/07/15/fullstack/","excerpt":"来自前端技术专家整理的前端进阶路线","text":"来自前端技术专家整理的前端进阶路线 该图片来源于第三方提供","categories":[{"name":"技术","slug":"技术","permalink":"https://zxzybin.github.io/categories/技术/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://zxzybin.github.io/tags/前端/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://zxzybin.github.io/categories/技术/"}]},{"title":"life","slug":"life","date":"2017-11-13T13:34:26.000Z","updated":"2019-11-13T02:49:17.017Z","comments":false,"path":"2017/11/13/life/","link":"","permalink":"https://zxzybin.github.io/2017/11/13/life/","excerpt":"","text":"该模块正在整理中。。。","categories":[{"name":"生活","slug":"生活","permalink":"https://zxzybin.github.io/categories/生活/"}],"tags":[],"keywords":[{"name":"生活","slug":"生活","permalink":"https://zxzybin.github.io/categories/生活/"}]},{"title":"正则表达式的学习与总结","slug":"正则表达式的学习与总结","date":"2017-10-05T12:21:10.000Z","updated":"2019-10-21T04:50:46.855Z","comments":true,"path":"2017/10/05/正则表达式的学习与总结/","link":"","permalink":"https://zxzybin.github.io/2017/10/05/正则表达式的学习与总结/","excerpt":"正则表达式的基本概念","text":"正则表达式的基本概念 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859/** * 正则表达式：也叫规则表达式，按照一定的规则组成的一个表达式，主要用来匹配字符串的 * 在大多数编程语言中都可以使用 * 最早是用在神经学中的 * 组成：是由元字符或者限定字符组成的一个式子 * * * * 元字符 * . 除了\\n以外的任意一个字符 * [] 里边可以放什么东西就代表什么东西，一般多表示范围 * [0] 表示数字0 * [360] 表示3或者6或者0 * [0-9] 表示0到9之间任何一个数字 [100-200]错误的写法 * [0-9]&#123;10&#125; 表示0到9之间任何一个数字出现了10次 * [1][0-9][0-9] 表示100到199之间的任意一个数字 * [a-z] 表示26个小写字母 * [a-zA-Z] 表示大小写字母中的其中一个 * [0-9a-zA-Z] 表示所有的数字或者字母中的一个 * [0-9]|[a-z] 表示要么是数字，要么是一个小写的字母 * | 表示或的意思，优先级最低，最后才计算 * () 分组 [0-9]|([a-z])|[A-Z]改变优先级 * ([0-9])([1-5])([a-z]) 三组，从最左边开始计算 * &#123;n&#125; 表示的该限定符前面的表达式出现了n次 * [a-z]&#123;3&#125; 表示a-z之间的字母出现了三次 * [a-z0-9]&#123;1,6&#125; 最少出现1次最多出现6次 * * 表示前面的表达式出现0次或者多次 [a-z][0-9]* 表示小写字母中的任意一个，后面要么没数字，要么是多个数字的 * + 表示前面的表达式出现1次或者多次 &#123;1,&#125; * ? 表示前面的表达式出现0次或者1次 另一个含义：阻止贪婪模式 * \\d 数字中的任意一个 * \\D 非数字 * \\s 空白符中的一个 * \\S 非空白符 * \\w 表示非特殊符号 下划线_也是非特殊字符 * \\W 表示特殊符号 * \\b 单词边界 * g 表示全局匹配 * i 忽略大小写 * * * 限定符：表示前面的表达式出现的次数 * &#123;&#125; 更加明确前面的表达式出现的次数 * &#123;0,&#125; 表示的是前面的表达式出现了0次到多次，和 * 一样的 * &#123;1,&#125; 表示的是前面的表达式出现了1次到多次，和 + 一样的 * &#123;0,1&#125; 表示的是前面的表达式出现了0次到1次， 和 ？一样的 * &#123;4&#125; 表示前面的表达式出现4次 * &#123;,10&#125; =====错误的 * * ^ 表示以什么开始，或者取非（取反） * ^[0-9] 以数字开头 * ^[a-z] 以小写字母开头 * [^0-9] 取反，非数字 * [^a-z] 非小写字母 * $ 表示以什么结束，可配合^使用 * ^[0-9][a-z]$ 相当于严格模式 * * * * */ 正则表达式的简单使用123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121 /** * 常见案例如下： * 15位或者18位身份证号码 ([1-9][0-9]&#123;14&#125;)|([1-9][0-9]&#123;16&#125;[0-9xX]) * 15位号码： [1-9][0-9]&#123;14&#125; * 18位号码： [1-9][0-9]&#123;16&#125;[0-9xX] * 简写： ([1-9][0-9]&#123;14&#125;)([0-9]&#123;2&#125;[0-9xX])? * * * * 座机号码的正则表达式 * 规律： 010-19876542 * 规律： 0412-19822393 * 匹配规则: [0-9]&#123;3,4&#125;[-][0-9]&#123;8&#125; 或者\\d&#123;3,4&#125;[-]\\d&#123;8&#125; * * * qq号码 * 规律： 5-11数字 * 匹配规则: [1-9][0-9]&#123;4,11&#125; * * * 手机号 * 规律： 11位数字 * 规律： 130 131 132 134 135 136 137 138 139 * 规律： 143 147 * 规律： 150到159 * 规律： 170 171 173 176 177 * 规律： 180到189 * 匹配规则： ([1][358][0-9][0-9]&#123;8&#125;)|([1][4][37][0-9]&#123;8&#125;)|([1][7][01367][0-9]&#123;8&#125;) * 简写: \\d&#123;11&#125; * 注释：如果有新的号码规律，完善规则即可 * * * 邮箱正则表达式 * 规律： 数字、字母、下划线、中划线、点、 sd12323QWE-._12@126.com 等等 * 匹配规则： ^[0-9a-zA-Z_.-]+[@][0-9a-zA-Z_.-]+([.][a-zA-Z]+)&#123;1,2&#125;&amp; * *中文正则表达式 * 匹配规则：[\\u4e00-\\u9fa5] * escape 将中文编码 * unescape 把编码转成中文 * //判断密码级别 function getLvl(pwd) &#123; var level = 0; //验证密码中是否有数字 if(/\\d/.test(pwd))&#123; level++; &#125; //验证密码中是否有字母 if(/[a-zA-Z]/.test(pwd))&#123; level++; &#125; //验证密码中是否有特殊符号 if(/[^0-9a-zA-Z_]/.test(pwd))&#123; level++; &#125; return level; // 1 或者 3 &#125; //匹配全部的数字 var str = \"中国移动：10086，中国联通：10010，中国电信：10000\"; var array = str.match(/\\d&#123;5&#125;/g); console.log(array); var reg = /\\d&#123;5&#125;/g; var arr = reg.exec(str); while (arr != null)&#123; console.log(arr[0]); arr = reg.exec(str); &#125; //提取日 var str = \"2016-06-29\"; var arr = str.match(/(\\d&#123;4&#125;)[-](\\d&#123;2&#125;)[-](\\d&#123;2&#125;)/g); //正则表达式对象.$3, 提取组 console.log(RegExp.$3) //提取邮箱中的信息 var str = 'noonezxzy@126.com.cn'; var arr = str.match(/([0-9a-zA-Z_.-]+)[@]([0-9a-zA-Z_-]+)(([.][a-zA-z]+)&#123;1,2&#125;)/); console.log(RegExp.$1); console.log(RegExp.$2); console.log(RegExp.$3); //文字替换 var str = '今天真是美好的一天，遇到美好的事情，遇见美好的人儿!'; str = str.replace(/美好/g,'糟糕'); console.log(str);//字符串剔除空格 var str = ' 天真好， 出去打球啊 '; console.log(str); str = str.trim(''); //只能去掉两端的空白符 console.log(str); //使用正则剔除空格 var str = ' 天真好， 出去打球啊 '; str = str.replace(/\\s+/g,''); //\\s空白符 console.log(str) //字母替换 var str = 'aAbaAbaAbACa'; str = str.replace(/[a]/gi,'S'); console.log(str) * */","categories":[{"name":"技术","slug":"技术","permalink":"https://zxzybin.github.io/categories/技术/"}],"tags":[{"name":"正则","slug":"正则","permalink":"https://zxzybin.github.io/tags/正则/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://zxzybin.github.io/categories/技术/"}]},{"title":"css初始化","slug":"initialize","date":"2017-07-28T12:17:19.000Z","updated":"2019-09-28T06:20:02.993Z","comments":false,"path":"2017/07/28/initialize/","link":"","permalink":"https://zxzybin.github.io/2017/07/28/initialize/","excerpt":"我们知道，任何浏览器都会设置user agent stylesheet，通常大家","text":"我们知道，任何浏览器都会设置user agent stylesheet，通常大家 在做开发的时候，常常因为浏览器的样式不统一而产生一定的麻烦，浏览器的默认样式往往不能满足我们的预期，因此我们就需要重置浏览器样式下面则是本人开发中搜集的一些初始化样式，以及一些常用样式整理。。。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576不推荐改做法，因为会极大的增加浏览器的压力 *&#123; margin:0; padding:0 &#125;//推荐做法 /*禁止字体自动放大*/ body&#123; -webkit-text-size-adjust: 100% !important; text-size-adjust: 100% !important; -moz-text-size-adjust: 100% !important; &#125; body,dl,dd,p,h1~h6&#123;margin:0;padding:0&#125; h1~h6&#123;font-size:100%&#125;/*继承body字体大小*///根据屏幕大小改变字体 /*手机屏幕*/ @media screen and（max-width:768px）&#123; html&#123;font-size:15px&#125; &#125; /*平板屏幕*/ @media screen and（min-width:768px）and （max-width:992px）&#123; html&#123;font-size:20px&#125; &#125; /*电脑屏幕*/ @media screen and （min-width;992px）&#123; html&#123;font-size:25px&#125; &#125; body&#123;font-family:\"Droid Sans Fallback\",\"Heiti SC\",\"Droid Sans\",\"Helvetica\",\"Helvetica Neue\",\"sans-self\";color:#555;background-color:#f7f7f7&#125; /*清除浮动*/.clearfix:after&#123;content:'';display:block;visibility:hidden;height:0;clear:both&#125;a:hover&#123;text-decoration:none&#125;ul,ol&#123;list-style:none;margin:0;padding:0&#125;/*图片自适应*/img&#123;max-width:100%;height:auto;&#125;/*如需默认样式可修改*/em,i&#123;font-style:normal&#125;/*除去焦点状态下的蓝色边框*/button,input,slect,textarea&#123;vertical-align:middle;outline:none&#125;/*修改占位词文字颜色*/input::-webket-input-placeholder,textarea::-webket-input-placeholder&#123;color:#ccc&#125;input:-ms-input-placeholder,textarea:-ms-input-placeholder &#123;color: #ccc;&#125;input::-webkit-input-placeholder,textarea::-webkit-input-placeholder &#123;color: #ccc;&#125;/*字体抗锯齿渲染平滑处理*/ -webkit-font-smoothing: // 主要有三个属性值 none: 无抗锯齿 subpixel-antialiased (default): 次像素平滑 常见于Mac OS和MacType For Windows antialiased: 灰度平滑 常用于Android和iOS等移动设备/*单行，溢出显示省略号*/ text-overflow: ellipsis; white-space:nowrap; overflow:hidden;/*多行，溢出显示省略号*/ overflow: hidden; text-overflow: ellipsis; display: -webkit-box; -webkit-line-clamp: 3; //n:超出该行数就隐藏 -webkit-box-orient: vertical; 后续继续补充中。。。","categories":[{"name":"技术","slug":"技术","permalink":"https://zxzybin.github.io/categories/技术/"}],"tags":[{"name":"css","slug":"css","permalink":"https://zxzybin.github.io/tags/css/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://zxzybin.github.io/categories/技术/"}]},{"title":"如何使用npm发布自己的模块包","slug":"npm","date":"2017-04-20T13:33:11.000Z","updated":"2019-07-07T02:20:29.186Z","comments":false,"path":"2017/04/20/npm/","link":"","permalink":"https://zxzybin.github.io/2017/04/20/npm/","excerpt":"打开npm官网注册自己的账号","text":"打开npm官网注册自己的账号 假设您对npm的相关使用已经相当熟悉 项目初始化1$ npm init 如图所示执行npm init根据提示填写相关初始化信息： 在npm资源库中注册用户（用户名、密码、邮箱）,也就是自己创建的npm的账户信息1$ npm adduser 如图所示 项目准备就绪，执行如下命令即可发布1$ npm publish 发布成功如图所示 发布成功后，登录npm官网即可查看，也可以在自己项目中安装自己的发布包，安装命令如下1$ npm install 发布包名称 5. 如果发布失败的话，常见403错误，检查自己的镜像或者检查自己的包名称是否已被占用 1$ npm config get registry （查看当前npm的镜像源是否为http://registry.npmjs.org/） 6. 如果不是http://registry.npmjs.org/，则需要做如下设置 1$ npm config set registry http://registry.npmjs.org/ 7. 删除发布包 12$ npm --force unpublish &lt;包名称&gt;$ npm --force unpublish &lt;包名称&gt;@版本号 //指定版本号删除 小注：（每次发布需修改package.json的版本号，修改规则如下） 语义版本号分为X.Y.Z三位，分别代表主版本号、次版本号和补丁版本号。 如果只是修复bug，需要更新Z位。 如果是新增了功能，但是向下兼容，需要更新Y位。 如果有大变动，向下不兼容，需要更新X位。","categories":[{"name":"技术","slug":"技术","permalink":"https://zxzybin.github.io/categories/技术/"}],"tags":[{"name":"npm","slug":"npm","permalink":"https://zxzybin.github.io/tags/npm/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://zxzybin.github.io/categories/技术/"}]},{"title":"JavaScript笔记整理第5篇","slug":"JavaScript笔记整理第5篇","date":"2016-06-29T11:26:15.000Z","updated":"2019-10-21T03:29:48.538Z","comments":true,"path":"2016/06/29/JavaScript笔记整理第5篇/","link":"","permalink":"https://zxzybin.github.io/2016/06/29/JavaScript笔记整理第5篇/","excerpt":"关于Javascript中闭包的简单总结","text":"关于Javascript中闭包的简单总结 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103 //闭包 /** * 闭包的概念：函数B可以访问函数A中定义的变量或者是数据，此时就形成了闭包 * 闭包的作用：缓存数据，延长作用域链 * 闭包的模式：函数的闭包，对象的闭包 * 闭包的优点和缺点：缓存数据，内存泄露 * 闭包的应用 * * * * *///预热： function f1() &#123; var num = 100; function f2() &#123; num++; console.log(num); &#125; f2(); &#125; f1();//101 f1();//101 f1();//101 function f1() &#123; var num = 100; return function () &#123; num++; console.log(num) &#125; &#125; var ff = f1(); ff()//101 ff()//102 ff()//103//案例： //函数模式的闭包 function f1() &#123; var num = 10 function f2() &#123; console.log(num) &#125; f2() &#125; f1();//10 //对象模式的闭包 function f2() &#123; var num = 10; var obj = &#123; age:num &#125; console.log(obj.age); &#125; f2();//10 //闭包产生相同的随机数 function showRandom()&#123; var a = parseInt(Math.random()*10+1); console.log('随机数',a) return a; &#125; showRandom(); showRandom(); showRandom(); function f1() &#123; var random = showRandom();//变量random会被缓存 return function () &#123; console.log(random) &#125; &#125; var ff = f1(); ff() ff() ff() //总结：如果要缓存数据，就把这个数据放在外层的函数和里层的函数的中间位置 //闭包的作用：优点：缓存数据，缺点：没有及时的释放 //局部变量是在函数中，函数使用结束后，局部变量就会被自动的释放 //闭包后，里面的局部变量的使用作用域链就会被延长 //利用闭包实现点赞数据缓存 var btns = document.getElementsByTagName('input'); function getValue() &#123; var val = 2; //闭包缓存的数据 return function () &#123; //每一次点击，改变当前点击按钮的值 this.value = \"点赞 (\"+(val++)+ \")\"; &#125; &#125; for(var i = 0 ; i &lt; btns.length;i++)&#123; btns[i].onclick = getValue(); &#125;","categories":[{"name":"技术","slug":"技术","permalink":"https://zxzybin.github.io/categories/技术/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://zxzybin.github.io/tags/javascript/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://zxzybin.github.io/categories/技术/"}]},{"title":"JavaScript笔记整理第4篇","slug":"JavaScript笔记整理第4篇","date":"2016-06-28T12:16:15.000Z","updated":"2019-10-20T15:05:01.949Z","comments":false,"path":"2016/06/28/JavaScript笔记整理第4篇/","link":"","permalink":"https://zxzybin.github.io/2016/06/28/JavaScript笔记整理第4篇/","excerpt":"关于Javascript中this的指向","text":"关于Javascript中this的指向 123456789101112131415161718192021222324252627/** * 普通函数中的this是 -----window * 对象.方法中的this是 -----当前的实例对象 * 定时器方法中的this是 -----window * 构造函数中的this是 ----当前的实例对象 * 原型对象方法中的this是 ----当前的实例对象 * * * 那么严格模式中的this指向的是谁呢？？？ * * */\"use strict\";function f1() &#123; console.log(this); //window ？？？？ 严格模式下输出undefined&#125;window.f1();/** * 函数也是对象，但对象不一定是函数 * 实例对象里有__proto__，下划线原型 * 构造函数里有prototype原型对象 * 所有的对象最终都指向了Object的原型（prototype），Object的原型对象中的下划线的原型指向null * *///所有的函数实际上都是Function的构造函数创建出来的实例对象var f1 = new Function('num1','num2','return num1+num2');console.log(f1(10,20))//30 关于Javascript中call、apply、bind的使用总结123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103 function f1(x,y) &#123; console.log('结果是：'+(x+y)+this); &#125; console.log('====='); apply与call也是函数调用的方式 f1.apply(); //NaN[object Window] f1.call(); //NaN[object Window] console.log('====='); f1.apply(null); //NaN[object Window] f1.call(null); //NaN[object Window] /** * * * 结论：apply和call方法中如果没有传入参数或者传入的是null。那么调用该方法的函数对象中的this就是默认的window * * */ f1.apply(null,[100,200]); //300[object Window] f1.call(null,100,200); //300[object Window] /** * * 结论：都可以让函数和方法来调用，传入参数和函数自己调用的写法不一样，但是效果一样 * * */ var obj = &#123; age:10, sex:\"男\" &#125; window.f1.apply(obj,[10,20]); //30[object Object] window.f1.call(obj,10,20); //30[object Object] console.dir(obj); /** * * 结论：apply和call可以改变this的指向 */ //f1即是函数也是对象 console.log(f1); //对象调用方法，说明，该对象中有这个方法 f1.apply(); f1.call(); /** * 猜想：这两个方法应该在它的实例对象或者原型对象中 * 结论：该方法都在都在它所在的构造函数的原型对象中 * * */ console.log(f1.__proto__ == Function.prototype) //true //所有的函数都是Function的实例对象 console.log(Function.prototype); //ƒ () &#123; [native code] &#125; console.dir(Function) //ƒ Function() /** * apply与call方法并不在f1函数这个实例对象中，而是在Function的prototype中 * * */ /** bind篇 */ function f1(x,y) &#123; console.log((x+y)+\":=======&gt;\"+this);&#125; //bind相当于复制了一份， var ff = f1.bind(); ff(); //NaN:=======&gt;[object Window] 此时的this是window //把参数传入到f1函数中，x====&gt;10,y=====&gt;20 ,null就是this，默认就是windowvar ff = f1.bind(null,10,20);ff(); //30:=======&gt;[object Window] function f1() &#123; console.log(\":=======&gt;\"+this.age); &#125; function Person() &#123; this.age=1000; &#125; var p = new Person(); var ff = f1.bind(p,10,20) ff(); //此时f1函数中的this.age就是p的实例对象的属性的值 /** * bind方法是复制的意思，参数可以在复制的时候穿进去，也可以在复制之后调用的时候传入进去 * apply和call是在调用的时候改变this指向 * bind是在复制的时候改变this的指向 * 语法： * 函数名字.bind(对象，参数1，参数2，....)返回值是复制之后的这个函数 * * */","categories":[{"name":"技术","slug":"技术","permalink":"https://zxzybin.github.io/categories/技术/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://zxzybin.github.io/tags/javascript/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://zxzybin.github.io/categories/技术/"}]},{"title":"JavaScript笔记整理第3篇","slug":"JavaScript笔记整理第3篇","date":"2016-06-25T13:27:26.000Z","updated":"2019-10-09T14:50:39.264Z","comments":true,"path":"2016/06/25/JavaScript笔记整理第3篇/","link":"","permalink":"https://zxzybin.github.io/2016/06/25/JavaScript笔记整理第3篇/","excerpt":"关于Javascript面向对象之继承","text":"关于Javascript面向对象之继承 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859function Person(name,weight) &#123; this.name=name; this.weight=weight;&#125;Person.prototype.eat=function () &#123; console.log('作为一个人类，当然吃饭是此生第一大事');&#125;function Student(love) &#123; this.love=love;&#125;//通过改变原型指向实现的继承Student.prototype = new Person('jack','50kg');Student.prototype.study=function () &#123; console.log(this.name+'作为一个学生，要好好学习啊');&#125;var stu = new Student('爱好唱歌');console.log(stu.name,stu.weight);//调用父类的属性stu.eat(); //调用父类的方法stu.study();//调用自己的方法/** * 为了数据共享，改变原型指向，做到了继承------通过改变原型指向实现的继承 * 缺陷：改变原型指向的同事实现继承，直接初始化了属性，继承过来的值都一样了 * 只能重新调用对象属性进行重新赋值 * * * * 解决方案：继承的时候，不用改变原型的指向，直接调用父级构造函数的方式为属性赋值就可以了-------借用构造函数:构造函数.call(当前对象,属性,属性,属性,属性....) * 解决了属性继承，并且值不重复的问题 * 缺陷：父级类别的方法无法继承 * * * * 组合继承：原型继承+借用构造函数两者都使用即实现了属性和方法的继承 * */function Person(name,sex,age,height) &#123; this.name=name; this.sex=sex; this.age=age; this.height=height;&#125;Person.prototype.eat=function () &#123; console.log('饿了就要吃饭，天经地义的事儿！！！');&#125;function Student(name,sex,age,height,score) &#123; //使用call方法，改变父类的this指向 Person.call(this,name,sex,age,height); this.score=score;&#125;var stu1 = new Student('jack','男',18,'180cm',180);//stu1.eat(); 此处无发调用该方法，因为该方法没有被继承过来console.log(stu1.name,stu1.sex,stu1.age,stu1.height,stu1.score);var stu2 = new Student('rose','女',16,'170cm',280);console.log(stu2.name,stu2.sex,stu2.age,stu2.height,stu2.score); 关于Javascript面向对象之拷贝继承12345678910111213141516171819202122232425262728293031323334353637383940414243//拷贝继承：把一个对象中的属性或者方法直接复制到另一个对象中var obj1=&#123; //在堆里开辟内存空间 name:\"jack\", sex:'男', age:18,&#125;//将obj1的内存地址赋值给obj2，只是改变了obj2的指向，两者实际上使用的是同一块内存空间//var obj2 = obj1; console.log(obj1 == obj2) //trueconsole.log(obj1 === obj2) //true//拷贝继承var obj1=&#123; //在堆里开辟内存空间 name:\"jack\", sex:'男', age:18,&#125; var obj2=&#123;&#125;for(var key in obj1)&#123; obj2[key] = obj1[key];&#125;console.log(obj1 == obj2) //falseconsole.log(obj1 === obj2) //false//原型拷贝function Person() &#123;&#125;Person.prototype.name='杰克';Person.prototype.sex=\"男\";Person.prototype.height=100;Person.play=function () &#123; console.log('我们可以一起玩吗');&#125;var obj3 = &#123;&#125;;for(var key in Person.prototype)&#123;//浅拷贝：把一个空间的东西拷贝到另一个空间（在堆中） obj3[key] = Person.prototype[key];&#125;console.log(obj3);console.dir(obj3.hasOwnProperty('sex'))//对象里边是否包含某个属性","categories":[{"name":"技术","slug":"技术","permalink":"https://zxzybin.github.io/categories/技术/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://zxzybin.github.io/tags/javascript/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://zxzybin.github.io/categories/技术/"}]},{"title":"JavaScript笔记整理第2篇","slug":"JavaScript笔记整理第2篇","date":"2016-06-23T13:53:08.000Z","updated":"2019-10-09T13:30:18.994Z","comments":true,"path":"2016/06/23/JavaScript笔记整理第2篇/","link":"","permalink":"https://zxzybin.github.io/2016/06/23/JavaScript笔记整理第2篇/","excerpt":"关于Javascript常见创建对象的几种方式以及原型链分析","text":"关于Javascript常见创建对象的几种方式以及原型链分析 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131//1.创建构造函数 function Person(name,age,sex) &#123; this.name=name; this.age=age; this.sex=sex; this.say=function () &#123; console.log('我饿了。我要吃饭'); &#125; &#125;//调用构造函数创建对象以及使用 var obj = new Person('jack',18,'男'); obj.say(); console.log(obj.name); console.dir(obj); console.dir(Person); //obj.constructor 获取实例对象的构造器（构造函数）//判断某个对象是否属于这种数据类型 console.log('obj.constructor === Person',obj.constructor === Person); console.log('obj.__proto__.constructor === Person',obj.__proto__.constructor === Person); console.log('obj.__proto__.constructor === Person.prototype.constructor');//2.工厂方式创建对象 function createObject(name,age) &#123; var obj = new Object(); obj.name=name; obj.age=age; return obj; &#125;//调用工厂方法 var obj1 = createObject('张三',18); console.log(obj1); /** *两种方式对比 * 共同点：都是函数，都可以创建对象，都可以传入参数 * * 区别 * 工厂模式： * 函数名小写、 * 内部有new、 * 有返回值、 * 直接调用函数就是创建对象 * 自定义构造函数： * 函数名大写、 * 内部无new、 * 没有返回值、 * this是当前对象 * *///使用prototype创建原型属性与方法，实现（数据共享，节省内存） /*方式一*/ function Student(name,age,sex) &#123; this.name=name; this.age=age; this.sex=sex; &#125; Student.prototype.height=188; Student.prototype.weight='55kg'; Student.prototype.eat=function () &#123; console.log(this.name+'饿了，要吃饭去'); &#125;; Student.prototype.isWillSwiming=true; var p1 = new Student('码云',15,'男'); p1.eat(); console.dir(Student) console.log(p1); /*方式二*/ function Student(name,age,sex) &#123; this.name=name; this.age=age; this.sex=sex; &#125; //简写弊端：无法查看构造器指向，需手动修改 Student.prototype=&#123; //手动修改构造器的指向 constructor:Student, height:100, weight:'55kg', version:1.0, eat:function () &#123; console.log('该吃饭了'); &#125;, study:function () &#123; console.log('该学习了'); &#125;, swiming:function () &#123; console.log('该游泳了') &#125; &#125;; var stu = new Student(\"刘亦菲\",18,'女') console.dir(Student) console.dir(stu)原型链总结 /** * 构造函数内部有自己的原型对象（protoptype） * 原型对象的构造器（constructor）指向自己的构造函数 * 实例对象内部有自己的原型（__proto__）指向的构造器（contructor）函数 * * * 实例对象先从自身寻找属性，如果找到就返回，如果没找到就从原型对象里边寻找，如果原型对象里也没有就直接报错了，整个寻找过程此时就形成了原型链 * * * 实例对象使用的属性或者方法，先在实例中查找，找到了则直接使用，找不到，去实例对象的_proto_指向构造函数的原型对象prototype中找，找到了则使用，找不到就报错 * 原型链：实例对象与原型对象之间的关系是通过原型（__proto__）来联系的，这种关系叫做原型链 * 实例对象与构造函数之间没有直接上的关系 * 构造函数中的this与原型对象中的this都是实例对象 * * * 原型??? * 实例对象中有__proto__这个属性，叫原型，也是一个对象，不是标准的属性 * 构造函数中有prototype这个属性，叫原型，也是一个对象，是标准的属性 * __proto__也可以叫原型对象 * prototype可以叫做原型对象 * * * 实例对象的__proto__和构造函数中的prototype相等 * 又因为实例对象是通过构造函数来创建的，构造函数中有原型对象prototype * 实例对象的__proto__指向了构造函数的原型对象prototype * * */","categories":[{"name":"技术","slug":"技术","permalink":"https://zxzybin.github.io/categories/技术/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://zxzybin.github.io/tags/javascript/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://zxzybin.github.io/categories/技术/"}]},{"title":"JavaScript笔记整理第1篇","slug":"JavaScript笔记整理第1篇","date":"2016-06-21T10:37:08.000Z","updated":"2019-10-21T03:58:31.065Z","comments":true,"path":"2016/06/21/JavaScript笔记整理第1篇/","link":"","permalink":"https://zxzybin.github.io/2016/06/21/JavaScript笔记整理第1篇/","excerpt":"Javascript中的数据类型与基本语法规则","text":"Javascript中的数据类型与基本语法规则 12345678910111213141516171819202122232425262728293031323334基本类型（值类型） Undefined Null Boolean Number String复杂类型（引用类型） Object Array Date RegExp Function内置对象： Global Math类型检测： typeof instanceof Object.prototype.toString.call()值类型与引用类型在内存中的存储方式 值类型按值存储（在栈中存储） 引用类型按引用存储 （地址在栈中存储，对象在堆中存储）作用域：使用范围 全局变量：声明的变量使用var，就是全局变量，全局变量可在任何位置使用 局部变量：在函数内部定义的变量，就是局部变量，外界无法使用 块级作用域（一对大括号就是一个块级作用域,在这块区域中定义的变量，只能在这个区域中使用，但是js在这个块级作用域中定义的变量，外面也可以使用，说明：js没有块级作用域） 扩展： 隐式全局变量：声明的变量没有var，就叫隐式全局变量 全局变量不能被删除，但是隐式全局变量可以被删除 预解析：在解析代码之前变量声明提前：把变量提前到当前所在的作用域的最上面 函数声明提前：提前到当前所在的作用域的最上面 * 注意： * 变量的提升只会在当前的作用域提升，提升到当前作用域的最前边 * 函数的变量只会提升到函数的作用域中的最前边 * 预解析会分段（多对的script标签中函数重名，预解析不会冲突） * 预解析的过程其实就是把函数的声明和变量的声明提前 * 变量的声明总是在函数的声明的最上边 //预热： //变量的提升 console.log(num); //undefined var num = 100; //函数的声明被提前了 f1(); function f1() &#123; console.log('这个函数执行了'); &#125; //函数表达式不会被提前 f2(); //报错：f2 is not a function var f2 = function () &#123; console.log('我是一个函数表达式') &#125;***** 案例一 ***** console.log(a);//猜想此处输出undefined？？？ function a() &#123; console.log('aaaaa'); var a=10;//变量a会被提升到作用域的最前边，所以说上边猜想输出undefined &#125; var a=11; console.log(a)//输出11 /** * 解析以上a的猜想结果为什么是[Function: a]，而不是a * 等效于如下 * var a; * function a()&#123;console.log('aaaaa');&#125; * console.log(a);//此处变量a与函数a同名，所以此处输出的是函数a * a=11; * console.log(a); * * */ ***** 案例二 *****abc();console.log(c); //输出9console.log(b); //输出9console.log(a); //报错：Uncaught ReferenceError: a is not definedfunction abc() &#123; var a=b=c=9; console.log(a) //9 console.log(b) //9 console.log(c) //9&#125;/** * 解释如下，等同于 * var b; var c; function abc() &#123; var a=b=c=9; var a; a=9; //局部变量 //b,c都为隐式全局变量，变量作用域为全局 b=9; c=9; console.log(a) //9 console.log(b) //9 console.log(c) //9 &#125; abc(); console.log(c); //输出9 console.log(b); //输出9 console.log(a); //局部变量，外部访问不到所以报错， * * */ //函数成员 function f1(x,y,z) &#123; console.log(f1.name);//函数的名字，只读 console.log(f1.arguments.length);//实参的个数 console.log(f1.length);//函数定义的时候形参的个数 console.log(f1.caller); //调用者，谁调用f1这个函数，caller就是谁 &#125; f1(10,20);//此处调用输出结果；f1； 2； 3； null； function f1(fn) &#123; fn() &#125; f1(function () &#123; console.log('我是作为匿名函数调用的'); &#125;); function f2() &#123; console.log('我是作为命名函数调用的'); &#125; f1(f2); //一个函数作为另一个函数的返回值来使用 //判断这个对象和传入的类型是不是同一个类型 function fff(type) &#123; return function (obj) &#123; return Object.prototype.toString.call(obj) === type &#125; &#125; var ff = fff(\"[object Array]\"); var r = ff([10,20,30]); console.log(r); /** * 作用域：变量的使用范围 * 局部作用域和全局作用域 * js中没有块级作用域---（一对括号中定义的变量，这个变量可以在大括号外面使用） * 函数中定义的变量是局部变量 * * * */ /** * 作用域链：变量的使用，从里向外，层层搜索，找到即可使用 * 当搜索到0级作用域的时候，还是没用找到就报错了 * */ var num =10;//作用域链级别：0 function f1()&#123; var num=20;//作用域链级别：1 function f2() &#123; var num = 30;//作用域链级别：2 console.log(num); &#125; f2() &#125; f1();//30 //沙箱机制优点：便于协作开发命名冲突 //沙箱----小环境 (function () &#123; var num = 10; console.log(num+10); &#125;)(); //沙箱----小环境 (function () &#123; var num = 20; console.log(num+10); &#125;());//递归介绍：函数中调用函数自己，递归一定要有结束的条件 //递归案例：求数字相加的和：5+4+3+2+1 function getSum(x)&#123; if(x == 1) return 1; console.log(x); return x+getSum(x-1); return x == 1 ? 1:x+getSum(x-1); &#125; console.log(getSum(3)) /** * 执行： * getSum(2)------&gt;2+1 * 3+getSum(2) 此时的结果是3+2+1 * 4+getSum(3) 此时的结果是4+3+2+1 * 5+getSum(4) 此时的结果是5+4+3+2+1 * * */ //递归案例：求一个正整数各个位数上数字的和：123----&gt;6 = 1+2+3 function getEverySum(x) &#123; if(x &lt; 10)&#123; return x &#125; return x%10 + getEverySum(parseInt(x/10)) &#125; console.log(getEverySum(12345)) //递归案例：求斐波那契数列 function getFib(x) &#123; if(x == 1 || x== 2)&#123; return 1; &#125; return getFib(x-1) + getFib(x-2); &#125; console.log(getFib(12)) 后续继续补充中。。。","categories":[{"name":"技术","slug":"技术","permalink":"https://zxzybin.github.io/categories/技术/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://zxzybin.github.io/tags/javascript/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://zxzybin.github.io/categories/技术/"}]},{"title":"使用hexo搭建个人博客","slug":"hexo","date":"2016-05-09T13:57:45.000Z","updated":"2016-05-11T04:00:00.000Z","comments":false,"path":"2016/05/09/hexo/","link":"","permalink":"https://zxzybin.github.io/2016/05/09/hexo/","excerpt":"关于如何使用hexo管理个人博客相关简介","text":"关于如何使用hexo管理个人博客相关简介 Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"技术","slug":"技术","permalink":"https://zxzybin.github.io/categories/技术/"}],"tags":[{"name":"个人","slug":"个人","permalink":"https://zxzybin.github.io/tags/个人/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://zxzybin.github.io/categories/技术/"}]}]}